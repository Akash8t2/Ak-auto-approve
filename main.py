import asyncio
import signal
import time
import logging
import os

from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import FloodWait, RPCError

# -------------------- Config Class --------------------
# ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•Ä config.py ‡§Æ‡•á‡§Ç ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§µ‡•à‡§∞‡§ø‡§è‡§¨‡§≤‡•ç‡§∏ ‡§∏‡•á‡§ü ‡§π‡•à‡§Ç:
#
# class Config:
#     API_ID = int(os.getenv("API_ID", "0"))
#     API_HASH = os.getenv("API_HASH", "")
#     SESSION_STRING = os.getenv("SESSION_STRING", "")     # Î∞òÎìúÏãú "session:..." ÌòïÏãù
#     OWNER_ID = int(os.getenv("OWNER_ID", "0"))
#     MAX_RETRIES = int(os.getenv("MAX_RETRIES", "3"))
#     SLEEP_TIME = float(os.getenv("SLEEP_TIME", "0.5"))
#     DEFAULT_LIMIT = int(os.getenv("DEFAULT_LIMIT", "100"))

from config import Config

# -------------------- Logging Setup --------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    datefmt="%d-%b-%y %H:%M:%S"
)
logger = logging.getLogger(__name__)

# -------------------- Validate Session String --------------------
if not Config.SESSION_STRING:
    logger.error("‚ö†Ô∏è SESSION_STRING ‡§ñ‡§æ‡§≤‡•Ä ‡§π‡•à! ‡§ï‡•É‡§™‡§Ø‡§æ config.py ‡§Ø‡§æ Heroku Config Vars ‡§Æ‡•á‡§Ç ‡§∏‡§π‡•Ä ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§")
    exit(1)

# ‡§Ö‡§ó‡§∞ SESSION_PREFIX ("session:") ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§ú‡•ã‡§°‡§º ‡§¶‡•á‡§Ç
session_str = Config.SESSION_STRING
if not session_str.startswith("session:"):
    session_str = f"session:{session_str}"

# -------------------- Client Initialization --------------------
app = Client(
    name="SecureBot",
    api_id=Config.API_ID,
    api_hash=Config.API_HASH,
    session_string=session_str
)

# -------------------- Command Filter --------------------
def cmd(command):
    return filters.command(command, prefixes=["."]) & filters.user(Config.OWNER_ID)

# -------------------- Debug Logger for Incoming Messages --------------------
@app.on_message(filters.incoming)
async def log_messages(_, message: Message):
    text = message.text or "<non-text message>"
    logger.info(f"‡§®‡§Ø‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú from {message.from_user.id if message.from_user else 'unknown'}: {text}")

# -------------------- Basic Commands --------------------
@app.on_message(cmd("start"))
async def start_cmd(_, message: Message):
    await message.reply(
        "ü§ñ **‡§¨‡•â‡§ü ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à!**\n\n"
        "üìç **‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏:**\n"
        "‚Ä¢ `.approve [‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ]` - ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞‡•á‡§Ç\n"
        "‚Ä¢ `.decline [‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ]` - ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞‡•á‡§Ç\n"
        "‚Ä¢ `.status` - ‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ó‡§ø‡§®‡§§‡•Ä\n"
        "‚Ä¢ `.ping` - ‡§¨‡•â‡§ü ‡§ï‡•Ä ‡§ó‡§§‡§ø ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç\n"
        "‚Ä¢ `.help` - ‡§∏‡§≠‡•Ä ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç"
    )

@app.on_message(cmd("help"))
async def help_cmd(_, message: Message):
    help_text = (
        "üìú **‡§∏‡§≠‡•Ä ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏:**\n\n"
        "‚Ä¢ `.approve [‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ]` - ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞‡•á‡§Ç\n"
        "‚Ä¢ `.decline [‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ]` - ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞‡•á‡§Ç\n"
        "‚Ä¢ `.status` - ‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ó‡§ø‡§®‡§§‡•Ä\n"
        "‚Ä¢ `.ping` - ‡§¨‡•â‡§ü ‡§ï‡•Ä ‡§ó‡§§‡§ø ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç\n"
        "‚Ä¢ `.help` - ‡§Ø‡§π ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂"
    )
    await message.reply(help_text)

@app.on_message(cmd("ping"))
async def ping_cmd(_, message: Message):
    start_ts = time.time()
    reply = await message.reply("üèì ‡§™‡§ø‡§Ç‡§ó...")
    elapsed = (time.time() - start_ts) * 1000
    await reply.edit(f"üèì ‡§™‡•ã‡§Ç‡§ó! `{elapsed:.2f}ms`")

# -------------------- Core Logic --------------------
async def handle_request(chat_id: int, user_id: int, action: str) -> bool:
    """
    join request ‡§ï‡•ã approve/decline ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø FloodWait ‡§Ø‡§æ RPCError ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
    return True ‡§Ö‡§ó‡§∞ ‡§∏‡§´‡§≤, False ‡§Ö‡§ó‡§∞ MAX_RETRIES ‡§¨‡§æ‡§¶ ‡§≠‡•Ä ‡§´‡•á‡§≤ ‡§π‡•ã‡•§
    """
    for attempt in range(1, Config.MAX_RETRIES + 1):
        try:
            if action == "approve":
                await app.approve_chat_join_request(chat_id, user_id)
            else:
                await app.decline_chat_join_request(chat_id, user_id)
            return True
        except FloodWait as e:
            wait_time = e.value + 1
            logger.warning(f"FloodWait: {wait_time} ‡§∏‡•á‡§ï‡•á‡§Ç‡§° ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç (‡§Ø‡•Ç‡§ú‡§º‡§∞ {user_id})...")
            await asyncio.sleep(wait_time)
        except RPCError as e:
            logger.error(f"‡§ï‡•ã‡§∂‡§ø‡§∂ {attempt}/{Config.MAX_RETRIES} ‡§µ‡§ø‡§´‡§≤ (‡§Ø‡•Ç‡§ú‡§º‡§∞ {user_id}): {e}")
            await asyncio.sleep(1)
    return False

async def process_requests(message: Message, action: str):
    """
    ‡§è‡§ï ‡§∏‡§æ‡§• ‡§ï‡§à join requests ‡§ï‡•ã process ‡§ï‡§∞‡§§‡§æ ‡§π‡•à (approve ‡§Ø‡§æ decline)‡•§
    """
    try:
        limit = int(message.command[1]) if len(message.command) > 1 else Config.DEFAULT_LIMIT
    except (IndexError, ValueError):
        limit = Config.DEFAULT_LIMIT

    processed = 0
    success = 0

    async for req in app.get_chat_join_requests(message.chat.id):
        if processed >= limit:
            break

        ok = await handle_request(message.chat.id, req.user.id, action)
        if ok:
            success += 1
        processed += 1

        # ‡§Ö‡§ó‡§≤‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§•‡•ã‡§°‡§º‡•Ä ‡§¶‡•á‡§∞ ‡§∞‡•Å‡§ï‡•á‡§Ç
        await asyncio.sleep(Config.SLEEP_TIME)

    emoji = "‚úÖ" if action == "approve" else "‚ùå"
    text = "‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§" if action == "approve" else "‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§"
    await message.reply(f"{emoji} ‡§∏‡§´‡§≤: {success}/{processed} ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß {text}!")

@app.on_message(cmd("approve"))
async def approve_requests(_, message: Message):
    await process_requests(message, "approve")

@app.on_message(cmd("decline"))
async def decline_requests(_, message: Message):
    await process_requests(message, "decline")

@app.on_message(cmd("status"))
async def status_requests(_, message: Message):
    try:
        count = 0
        async for _ in app.get_chat_join_requests(message.chat.id):
            count += 1
        await message.reply(f"üìä ‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß: {count}")
    except Exception as e:
        logger.exception(f"‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ö‡•á‡§ï ‡§µ‡§ø‡§´‡§≤: {e}")
        await message.reply(f"‚ö†Ô∏è ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ö‡•á‡§ï ‡§µ‡§ø‡§´‡§≤:\n`{e}`")

# -------------------- Graceful Shutdown --------------------
async def graceful_shutdown(sig, loop):
    logger.info(f"üö® ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§: {sig.name} | ‡§¨‡•â‡§ü ‡§¨‡§Ç‡§¶ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...")
    try:
        await app.stop()
    except Exception as e:
        logger.error(f"‡§∏‡•ç‡§ü‡•â‡§™ ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}")

    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    for task in tasks:
        task.cancel()

    await asyncio.gather(*tasks, return_exceptions=True)
    loop.stop()
    logger.info("üéâ ‡§¨‡•â‡§ü ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡§Ç‡§¶ ‡§π‡•Å‡§Ü")

# -------------------- Main Function --------------------
async def main():
    await app.start()
    logger.info("üöÄ ‡§¨‡•â‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•Å‡§Ü ‡§î‡§∞ awaiting events...")

    # ‡§Ö‡§®‡§Ç‡§§‡§ï‡§æ‡§≤ ‡§§‡§ï ‡§ö‡§≤‡§§‡§æ ‡§∞‡§π‡•á
    await asyncio.Event().wait()

# -------------------- Entry Point --------------------
if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ ‡§∏‡•á‡§ü‡§Ö‡§™ (Linux/Heroku ‡§™‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ)
    for sig in (signal.SIGTERM, signal.SIGINT):
        loop.add_signal_handler(
            sig,
            lambda s=sig: asyncio.create_task(graceful_shutdown(s, loop))
        )

    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        pass
    finally:
        if not loop.is_closed():
            loop.close()
