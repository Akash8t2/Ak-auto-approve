import asyncio
import time
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import FloodWait, RPCError
from config import Config

app = Client(
    name="SecureBot",
    api_id=Config.API_ID,
    api_hash=Config.API_HASH,
    session_string=Config.SESSION_STRING
)

def cmd(command):
    return filters.command(command, prefixes=["."]) & filters.user(Config.OWNER_ID)

# -------------------- Basic Commands --------------------
@app.on_message(cmd("start"))
async def start_cmd(client: Client, message: Message):
    await message.reply(
        "ü§ñ **‡§¨‡•â‡§ü ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à!**\n\n"
        "üìç **‡§â‡§™‡§Ø‡•ã‡§ó:**\n"
        "- `.approve` : ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß\n"
        "- `.decline` : ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß\n"
        "- `.help` : ‡§∏‡§≠‡•Ä ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç"
    )

@app.on_message(cmd("help"))
async def help_cmd(client: Client, message: Message):
    help_text = (
        "üìú **‡§∏‡§≠‡•Ä ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏:**\n\n"
        "`.approve [‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ]` - ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞‡•á‡§Ç\n"
        "`.decline [‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ]` - ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞‡•á‡§Ç\n"
        "`.status` - ‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ó‡§ø‡§®‡§§‡•Ä\n"
        "`.ping` - ‡§¨‡•â‡§ü ‡§ï‡•Ä ‡§ó‡§§‡§ø ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç\n"
        "`.help` - ‡§Ø‡§π ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂"
    )
    await message.reply(help_text)

@app.on_message(cmd("ping"))
async def ping_cmd(client: Client, message: Message):
    start = time.time()
    reply = await message.reply("üèì ‡§™‡§ø‡§Ç‡§ó...")
    delta = (time.time() - start) * 1000
    await reply.edit(f"üèì ‡§™‡•ã‡§Ç‡§ó! `{delta:.2f}ms`")

# -------------------- Core Logic --------------------
async def handle_requests(message: Message, action: str):
    try:
        limit = int(message.command[1]) if len(message.command) > 1 else Config.DEFAULT_LIMIT
        count = 0
        
        async for request in app.get_chat_join_requests(message.chat.id):
            for attempt in range(Config.MAX_RETRIES):
                try:
                    if count >= limit:
                        return await message.reply(f"‚ôªÔ∏è {count} ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß {action} ‡§ï‡§ø‡§è!")
                    
                    if action == "approve":
                        await app.approve_chat_join_request(message.chat.id, request.user.id)
                    elif action == "decline":
                        await app.decline_chat_join_request(message.chat.id, request.user.id)
                    
                    count += 1
                    await asyncio.sleep(Config.SLEEP_TIME)
                    break
                
                except FloodWait as e:
                    await asyncio.sleep(e.value + 2)
                except RPCError as e:
                    if attempt < Config.MAX_RETRIES - 1:
                        await asyncio.sleep(2)
                    else:
                        raise e

        action_emoji = "‚úÖ" if action == "approve" else "‚ùå"
        await message.reply(f"{action_emoji} {count} ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï {action}!")

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:\n`{str(e)}`")

@app.on_message(cmd("approve"))
async def approve_requests(client: Client, message: Message):
    await handle_requests(message, "approve")

@app.on_message(cmd("decline"))
async def decline_requests(client: Client, message: Message):
    await handle_requests(message, "decline")

@app.on_message(cmd("status"))
async def status_requests(client: Client, message: Message):
    try:
        count = sum(1 async for _ in app.get_chat_join_requests(message.chat.id))
        await message.reply(f"üìä **‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß:** `{count}`")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:\n`{str(e)}`")

# -------------------- Startup --------------------
async def main():
    await app.start()
    print("‚úÖ ‡§¨‡•â‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•Å‡§Ü!")
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
