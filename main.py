import asyncio
import time
from pyrogram import Client, filters
from pyrogram.types import Message
from config import API_ID, API_HASH, OWNER_ID, STRING_SESSION

# Pyrogram Client initialization with string session
app = Client(
    name="SecureBot",
    api_id=API_ID,
    api_hash=API_HASH,
    session_string=STRING_SESSION
)

# Custom command filter for the owner only
def cmd(command):
    return filters.command(command, prefixes=["."]) & filters.user(OWNER_ID)

# Start command
@app.on_message(cmd("start"))
async def start_cmd(client, message):
    await message.reply("‚úÖ ‡§¨‡•â‡§ü ‡§ö‡§æ‡§≤‡•Ç ‡§π‡•à!\n\n‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç `.help` ‡§™‡•Ç‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è‡•§")

# Help command
@app.on_message(cmd("help"))
async def help_cmd(client, message):
    await message.reply(
        "**‡§¨‡•â‡§ü ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏:**\n"
        "`.start` - ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç\n"
        "`.help` - ‡§Ø‡§π ‡§Æ‡•á‡§∏‡•á‡§ú ‡§¶‡•á‡§ñ‡•á‡§Ç\n"
        "`.ping` - ‡§¨‡•â‡§ü ‡§ï‡•Ä ‡§ó‡§§‡§ø ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç\n"
        "`.approve <limit>` - Pending join requests ‡§ï‡•ã approve ‡§ï‡§∞‡•á‡§Ç\n"
        "`.decline <limit>` - Pending join requests ‡§ï‡•ã decline ‡§ï‡§∞‡•á‡§Ç\n"
        "`.status` - ‡§∏‡§Æ‡•Ç‡§π ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡•á pending requests ‡§π‡•à‡§Ç"
    )

# Ping command
@app.on_message(cmd("ping"))
async def ping_cmd(client, message):
    start = time.time()
    reply = await message.reply("‡§™‡§ø‡§Ç‡§ó ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...")
    end = time.time()
    await reply.edit(f"üèì Pong! `{round((end - start) * 1000)} ms`")

# Approve join requests
@app.on_message(cmd("approve"))
async def approve_requests(client: Client, message: Message):
    try:
        limit = int(message.command[1]) if len(message.command) > 1 else 100
        count = 0
        skipped = 0

        async for req in client.get_chat_join_requests(message.chat.id):
            if count >= limit:
                break
            try:
                await client.approve_chat_join_request(message.chat.id, req.user.id)
                count += 1
                await asyncio.sleep(0.2)  # Faster speed
            except Exception as e:
                skipped += 1
                print(f"Skipped user {req.user.id} due to error: {e}")

        await message.reply(f"‚úÖ {count} ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§!\n‚õî {skipped} ‡§∏‡•ç‡§ï‡§ø‡§™ ‡§ï‡§ø‡§è ‡§ó‡§è‡•§")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}")

# Decline join requests
@app.on_message(cmd("decline"))
async def decline_requests(client: Client, message: Message):
    try:
        limit = int(message.command[1]) if len(message.command) > 1 else 100
        count = 0
        skipped = 0

        async for req in client.get_chat_join_requests(message.chat.id):
            if count >= limit:
                break
            try:
                await client.decline_chat_join_request(message.chat.id, req.user.id)
                count += 1
                await asyncio.sleep(0.2)
            except Exception as e:
                skipped += 1
                print(f"Skipped user {req.user.id} due to error: {e}")

        await message.reply(f"‚ùå {count} ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§!\n‚õî {skipped} ‡§∏‡•ç‡§ï‡§ø‡§™ ‡§ï‡§ø‡§è ‡§ó‡§è‡•§")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}")

# Status command
@app.on_message(cmd("status"))
async def status_requests(client: Client, message: Message):
    try:
        pending = []
        async for req in client.get_chat_join_requests(message.chat.id):
            pending.append(req.user.id)
        await message.reply(f"‚ÑπÔ∏è Pending Join Requests: `{len(pending)}`")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}")

# Run the bot
print("‚úÖ ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...")
app.run()
